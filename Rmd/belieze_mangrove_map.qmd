---
title: "Mangrove Map"
author: "Sebastian Di Geronimo"
date: 2025-09-22
format: html
editor: source
---

# 1.0 ---- Summary of Document ----

Plot sampling points of mangroves in Belize. 

Will need `xlsx` of points to run.

# 2.0 ---- Setup ----


## 2.1 Load Libraries

```{r setup, include=FALSE}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # additional
  OpenStreetMap, leaflet
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )
  

```

## 2.2 Load Dataset

```{r load-data}
loc_dat <- 
  here("data", "raw") %>%
  dir_ls(regexp = "Placencia") %>%
  str_subset("~", negate = TRUE) %>%
  readxl::read_xlsx(.name_repair = janitor::make_clean_names) %>%
  drop_na(lat, long) %T>% 
  print() 

```

# 3.0 Plot using `leaflet`

Overall points

```{r leaflet}
leaflet::leaflet() %>%
  addTiles() %>%
  addMarkers(loc_dat$long, loc_dat$lat)

```


# 4.0 Plt using `OpenStreeMap`

Inspired from: <https://ajsmit.github.io/Intro_R_Official/mapping-google.html>

```{r mangrove-stations}
# add boundaries for openstreemap
adj_deg <- 0.01 # degree widen
bounds <- 
  c(
    range(loc_dat$long) + c(-adj_deg, adj_deg),
    range(loc_dat$lat) + c(-adj_deg, adj_deg)
  ) %T>%
  print()

# extract openstreemap tiles
osm_map <-
  openmap(
    bounds[c(4, 1)], # upperleft
    bounds[c(3, 2)], # loweright
    zoom = 13,
    type = "esri-topo", 
    mergeTiles = TRUE
  ) %>%
  openproj()

loc_map <- 
  # plot openstreemap
  OpenStreetMap::autoplot.OpenStreetMap(osm_map) +
  
  # add mangrove points
  geom_point(
    data = loc_dat,
    aes(x = long, y = lat)
  ) +
  
  # add station labels
  ggrepel::geom_text_repel(
    data = loc_dat,
    aes(x = long, y = lat, label = samplingpoint),
    max.overlaps       = 15,
    min.segment.length = 0.05,
    size               = 2.5,
    # # uncomment for bold letters
    # fontface           = "bold",
    # color              = "white",
    # bg.color           = "black",
    # bg.r               = 0.15,
    # segment.color      = "black"
  ) +
  labs(
    x = "Longitude (°E)", 
    y = "Latitude (°S)"
  ) +
  theme_bw() +
  coord_sf(expand = FALSE)

# ---- subset map ---- #
loc_map
ylims <- c(NA, 16.56)
loc_map +
  scale_y_continuous(limits = ylims, expand = expansion()) +
  coord_sf(ylim = ylims)

ylims <- c(16.56, NA)
loc_map +
  scale_y_continuous(limits = ylims, expand = expansion()) +
  coord_sf(ylim = ylims)

ylims <- c(16.545, 16.58)
xlims <- c(-88.42, -88.34)
loc_map +
  scale_y_continuous(limits = ylims, expand = expansion()) +
  scale_x_continuous(limits = xlims, expand = expansion()) +
  coord_sf(ylim = ylims, xlim = xlims)
```

# 5.0 Save Plots using `camcorder`

After running, will need to redisplay plots for it to

```{r camcorder}
shelf(camcorder)
camcorder::gg_record(
  dir    = here::here("data", "cam_test", "belieze_map"),
  device = "png",
  dpi    = 600,
  units  = "mm",
  bg     = "white"
)

shell.exec(here::here("data", "cam_test", "belieze_map"))

# uncomment if need to resize
# camcorder::gg_resize_film(width = 90, height = 90 * 0.5625,  dpi = 600, units = "mm")

```

## 5.1 When done saving plots

```{r stop-camcorder}
camcorder::gg_stop_recording()
```



