---
title: "moving_average"
format: html
---

This test is to see how moving averages work when have data


# 1.1 Plot data

```{r}
x <- seq(1, 1000, by = 10) 

# x_lin <- 1.5 + 5 * x
# y <- x_lin + 200*sin(0.2*x_lin) + 50*cos(0.5*x_lin) + 10 * rnorm(x, sd = 3)


y <- 0.2*x + 20*sin(0.2*x) + 0.5*cos(0.5*x) + 10 * rnorm(x, sd = 3)

plot(x, y, type = "l", xlab = NA, ylab = NA)
# lines(x = x, y = x_lin, lty = "dashed", col = "blue")
```
# 2.0 Calculate a Moving Average Window

```{r}
avg_window <- 5
if (avg_window < 3) {
  cat("Moving average window is", avg_window, "and is less than 3. Making 3!\n")
  avg_window <- 3
}
if (avg_window %% 2 == 0) {
  cat("Moving average window is", avg_window, "and is even, subtracting 1 to be", avg_window - 1, "\b.\n")
  avg_window <- avg_window - 1
}

cat("Moving average window is", avg_window, "\b.\n")


# calc moving average
y_2 <- 
  as.matrix(y, nrow = 1, ncol = x) |> 
  t() |>
  rchemo::mavg(avg_window)

dim(y_2)

# add ends lost due to moving average
y_3 <- c(y[1:((length(x) - dim(y_2)[2]) / 2)], 
         t(y_2), 
         y[(dim(y_2)[2] + 1 + (length(x) - dim(y_2)[2]) / 2):length(x)]
         ) 

# add linear model
x_mod <- lm(y ~ x)
summary(x_mod)
```

# 2.1 Plot

```{r plot}
plot(x, y, type = "l", main = paste("Moving average window:", avg_window), 
     cex.main = 1, xlab = NA, ylab = NA)
lines(x = x, y = y_3, col = "red")
lines(x, x_mod$coefficients[1] + x_mod$coefficients[2] * x, 
      lty = "dashed", col = "blue")

legend(
  x      = "topleft",                                  # Position
  legend = c("Original", "Moving Average", "linear"),  # Legend texts
  lty    = c(1, 1, 2),                                 # Line types
  col    = c("black", "red", "blue"),                  # Line colors
  lwd    = 2,
  cex    = 0.5
  ) 
```

# 3.0 Plot Residuals

```{r plt-resid}
((x_mod$coefficients[1] + x_mod$coefficients[2] * x) - y) |> 
  plot(x = x, type = "l",
        xlab = NA, ylab = "Residuals")
abline(0,0, lty = "dashed", col = "blue")
lines(x = x, (x_mod$coefficients[1] + x_mod$coefficients[2] * x) - y_3, col = "red")
lines(x = x, y_3 - y, col = "purple")

legend(x      = "topleft",                                  # Position
       legend = c("Original", "Moving Average", "linear"),  # Legend texts
       lty    = c(1, 1, 3),                                 # Line types
       col    = c("black", "red", "blue"),                  # Line colors
       lwd    = 2,
       cex    = 0.5) 

```

# Lanczos Filter

NOTE: needs some work to see the difference
i.e. need to determine how to add time series data and plot before/after filter

From: <https://stackoverflow.com/questions/17264119/using-lanczos-low-pass-filter-in-r-program>

```{r}
#inputs
# window: Filter length: number of weights. Corresponds to the total number of
#         points to be lost. Should be odd: window = 2N-1. 
#         The formula for N is taken from Poan et al. (2013)
# sampl_rate: sampling rate=number of observation per time unit. ( eg: if time 
#             unit is one day, hourly data have sampl_rate=1/24)
# type:      "lowpass", "highpass" and "bandpass"
# low_freq:  the lowest frequency 
# high_freq: the highest frequency

lanczos_weights <- function(
    window     = 7, 
    sampl_rate = 1,
    type       = "lowpass", 
    low_freq   = 1 / 100, 
    high_freq  = 1 / 10) {
  
  low_freq  <- sampl_rate * low_freq
  high_freq <- sampl_rate * high_freq

  if (type == "lowpass") {
    order       <- ((window - 1) %/% 2) + 1
    nwts        <- 2 * order + 1
    fc          <- low_freq
    w           <- seq(0, 0, length = nwts)
    n           <- nwts %/% 2
    w[n + 1]    <- 2 * fc
    k           <- seq(1, n - 1)
    sigma       <- sin(pi * k / n) * n / (pi * k)
    firstfactor <- sin(2 * pi * fc * k) / (pi * k)
    w[n:2]      <- firstfactor * sigma
    w[(n + 2):(length(w) - 1)] <- firstfactor * sigma
    w <- w[-c(1, length(w))]
    
  } else if (type == "highpass") {
    order       <- ((window - 1) %/% 2) + 1
    nwts        <- 2 * order + 1
    fc          <- high_freq
    w           <- seq(0, 0, length = nwts)
    n           <- nwts %/% 2
    w[n + 1]    <- 2 * fc
    k           <- seq(1, n - 1)
    sigma       <- sin(pi * k / n) * n / (pi * k)
    firstfactor <- sin(2 * pi * fc * k) / (pi * k)
    w[n:2]      <- firstfactor * sigma
    w[(n + 2):(length(w) - 1)] <- firstfactor * sigma
    w           <- w[-c(1, length(w))]
    w           <- -w
    w[order]    <- 1 - 2 * fc
    
  } else if (type == "bandpass") {
    order       <- ((window - 1) %/% 2) + 1
    nwts        <- 2 * order + 1
    fc          <- low_freq
    w           <- seq(0, 0, length = nwts)
    n           <- nwts %/% 2
    w[n + 1]    <- 2 * fc
    k           <- seq(1, n - 1)
    sigma       <- sin(pi * k / n) * n / (pi * k)
    firstfactor <- sin(2 * pi * fc * k) / (pi * k)
    w[n:2]      <- firstfactor * sigma
    w[(n + 2):(length(w) - 1)] <- firstfactor * sigma
    w1          <- w[-c(1, length(w))]

    order       <- ((window - 1) %/% 2) + 1
    nwts        <- 2 * order + 1
    fc          <- high_freq
    w           <- seq(0, 0, length = nwts)
    n           <- nwts %/% 2
    w[n + 1]    <- 2 * fc
    k           <- seq(1, n - 1)
    sigma       <- sin(pi * k / n) * n / (pi * k)
    firstfactor <- sin(2 * pi * fc * k) / (pi * k)
    w[n:2]      <- firstfactor * sigma
    w[(n + 2):(length(w) - 1)] <- firstfactor * sigma
    w2          <- w[-c(1, length(w))]
    w           <- w2 - w1
    
  } else {
    print("Please specify a valid filter type: either 'lowpass', 'highpass' or 'bandpass'")
  }
  return(w)
}

lanczos_weights()

# apply Lanczos filter
y_lan <- convolve(y, (lanczos_weights()), type = 'filter')

plot(x, y, type = "l", main = "Lanczoc Filter", 
     cex.main = 1, xlab = NA, ylab = NA)
lines(x = x[-c(1:3, 98:100)], y = y_lan, col = "red")


legend(
  x      = "topleft",                                  # Position
  legend = c("Original", "Lanczos Filter", "linear"),  # Legend texts
  lty    = c(1, 1, 2),                                 # Line types
  col    = c("black", "red", "blue"),                  # Line colors
  lwd    = 2,
  cex    = 0.5
  )
```

# Lanczos filter from GitHub: `jrevenaugh/TSAUMN2`
I was not able to download this package so am using the functions here.

```{r}
lanczos_lp <- function(n, low) {
  order       <- ((n - 1) %/% 2) + 1
  n           <- order
  w           <- rep(0, n)
  w[1]        <- 2 * low
  k           <- 1:(n - 1)
  sigma       <- sin(pi * k / n) * n / (pi * k)
  firstfactor <- sin(2 * pi * low * k) / (pi * k)
  w[2:n]      <- firstfactor * sigma
  return(w)
}
lanczos_hp <- function(n, high) {
  w    <- lanczos_lp(n, high)
  w    <- -w
  w[1] <- w[1] + 1
  return(w)
}
lanczos_br <- function(n, low, high) {
  wl <- lanczos_lp(n, low)
  wh <- lanczos_hp(n, high)
  return(wl + wh)
}
lanczos_bp <- function(n, low, high) {
  wl <- lanczos_lp(n, high)
  wh <- lanczos_hp(n, low)
  w <- wl + wh
  w[1] <- w[1] - 1
  return(w)
}

lanczos <- function(n = 7,
                    type = c("lp", "hp", "bp", "br"),
                    low = 0, high = 0.5) {
  type <- match.arg(type)
  switch(type,
    lp = lanczos_lp(n, low),
    hp = lanczos_hp(n, high),
    bp = lanczos_bp(n, low, high),
    br = lanczos_br(n, low, high)
  )
}

lp_filter <- lanczos(7, 'lp', low = 0.1)

# Apply the filter using convolution
filtered_data <- convolve(y, rev(lp_filter), type = 'filter')

plot(x, y, type = "l", main = "Lanczos Filter", 
     cex.main = 1, xlab = NA, ylab = NA)
lines(x = x[-c(1:3, 98:100)], y = y_lan, col = "red")
lines(x = x[-c(1:2, 100)], y = filtered_data, col = "red")


legend(
  x      = "topleft",                                  # Position
  legend = c("Original", "Lanczos Filter", "linear"),  # Legend texts
  lty    = c(1, 1, 2),                                 # Line types
  col    = c("black", "red", "blue"),                  # Line colors
  lwd    = 2,
  cex    = 0.5
  )
```

```{r}
set.seed(123)
data <- sin(seq(0, 2 * pi, length.out = 100)) + rnorm(100, 0, 0.2)

# Create a low-pass Lanczos filter with length 7 and cutoff frequency 0.1 (Nyquist = 0.5)
lp_filter <- lanczos(7, 'lp', low = 0.1)

# Apply the filter using convolution
filtered_data <- convolve(data, rev(lp_filter), type = 'filter')

# Plot original and filtered data
plot(data, type = 'l', col = 'blue', main = 'Low-pass Lanczos Filter Example', ylab = 'Value', xlab = 'Time')
lines(filtered_data, col = 'red')
legend('topright', legend = c('Original', 'Filtered'), col = c('blue', 'red'), lty = 1)
```

# Linear vs Non-linear Forms of Functions

First convert data values to log form, make linear model then undo log form
and recalculate using non-linear form
$$
\text{Non-linear:}~ y = \alpha \times x^b 

\\

\text{Linear:}~ y = \alpha + x \times b
$$


```{r linear-non-linear-functions}
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 9, 16, 25)

log_x <- log(x)
log_y <- log(y)

model <- lm(log_y ~ log_x)
summary(model)

a <- exp(coef(model)[1])
b <- coef(model)[2]

# non-linear form (log form)
plot(x, y)
curve(a * x^b, add = TRUE, col = "red")
glue::glue("{a} * x ^ {b}")

# linear form
plot(log_x, log_y)
curve(coef(model)[1] + x * b, add = TRUE, col = "red")


```

