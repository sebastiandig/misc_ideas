---
title: "Processing Underway Flowthrough Data"
author: "Sebastian Di Geronimo"
date: 2025-09-25
format: html
editor: source
---

# 1.0 ---- Summary of Document ----



# 2.0 ---- Setup ----


## 2.1 Load Libraries

```{r setup, include=FALSE}
if (!nzchar(system.file(package = "librarian"))) 
  install.packages("librarian")

librarian::shelf(
  quiet = TRUE,
  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
  forcats, lubridate, glue, fs, magrittr, here,
  
  # additional
  hms, NISTunits
)

conflicts_prefer(
  dplyr::filter(), 
  dplyr::select()
  )
  

```

```{r hms-round-test}
 c("09:10:01", "08:10:02",  "08:20:45", "06:10:33", "06:17:30", "06:15:29") %>%
  as_tibble() %>%
  mutate(
    time = as_hms(value),
    time = as.POSIXct(time, origin = Sys.Date()),
    time = round(time, "min"),
    time = strftime(time, format = '%H:%M:%S'),
    time2 = as_hms(value),
    time2 = time_fun(time2)
  )

 
```


## 2.2 Load Dataset

```{r load-data}
# set location to save data and plots
dir_data_save <- here("data", "processed", "underway_flow_process")
dir_plt_save  <- here("data", "plots", "underway_flow_process")

# dir_data_location <- rstudioapi::selectDirectory()
dir_data_location <- here("E:\\", "google_drive", ".shortcut-targets-by-id", "1E3fmKuWxmqhFspHhqvbFEI5qKGGKJgnk", "SFER Ship Exported Data", "WS23203_ShipExports", "WS23203_Kelble_VIDs") %>%
  dir_ls() %T>% 
  print()


# function factory to pre-set metric used to summarise
set_func <- function(metric_name, ...) {
  fun <- switch(
    metric_name,
    mean   = mean,
    median = median,
    min    = min,
    max    = max,
    stop("Unknown metric")
  )
  
  function(x, ...) {
    fun(x, na.rm = TRUE, ...)
  }
}

func <- set_func("median")
func(c(1, 4, 5, NA))

# function factory to pre-set time rounding
set_time_func <- function(metric_name, sec, ...) {
  fun <- switch(
    metric_name,
    trunc = hms::trunc_hms,
    round = hms::round_hms,
    stop("Unknown metric")
  )
  
  function(x, ...) {
    fun(x, sec * 60, ...)
  }
}

# number of minutes to bin by
min_bin <- 1

time_fun <- set_time_func("trunc", sec = min_bin)
# time_fun <- set_time_func("round", sec = min_bin)
```


To add multiple metrics: 
  summarise(
    across(
      is.numeric,
      list(
        func = ~ func(.x),
        var = ~ var(.x)
      )
    )
  ) 

```{r}
# % path_base='/Users/ian.smith/Documents/MATLAB/WS21338Matlab/';
path_c3p   <- "Turner C3 Primary"   #
path_c3s   <- "Turner C3 Secondary" # 
path_chlfl <- "Fluorometer"         #
path_domfl <- "DisOrgMat"           #
path_pos   <- "POSMV"             # 
path_tsg   <- "MicroTSG1"           #
path_sb    <- "SBTemp"              #
path_rain  <- "RainGauge"
path_rmyp  <- "PortRMYoung"         #
path_rmyst <- "StarboardRMYoung"    #

```


# POSMV

```{r path-posmv}
posmv_path <- 
  dir_data_location %>%
  str_subset("POSMV$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }

# VTG
# COG (course over ground) and SOG (speed over ground)
vtg_path <- 
  posmv_path %>%
  str_subset("VTG") %T>% 
  {
    basename(.) %>%
    print()
  }

# HDT
# true heading
hdt_path <- 
  posmv_path %>%
  str_subset("HDT") %T>% 
  {
    basename(.) %>%
    print()
  }

# GGA
# lat/lon
gga_path <- 
  posmv_path %>%
  str_subset("GGA") %T>% 
  {
    basename(.) %>%
    print()
  }

```

```{r load-posmv}
vtg_load <- 
  vtg_path %>%
  read_delim(
    skip           = 1,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    n_max          = 100
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time"))) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %>%
  select(contains("date"):cog, contains("sog")) %T>%
  print()

hdt_load <- 
  hdt_path %>%
  read_delim(
    skip           = 1,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 100
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time"))) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %>%
  select(contains("date"):true_heading) %T>%
  print()

gga_load <-
  gga_path %>%
  read_delim(
    skip           = 1,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 100
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time"))) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %>%
  mutate(
    .keep  = "unused",
    .after = time_round,
    lat    = lat_deg + lat_min / 60,
    lon    = -(lon_deg + lon_min / 60),
  )  %>%
  select(computer_date:lon) %T>%
  print()

posmv_avg <- 
  reduce(
  list(gga_load, hdt_load, vtg_load),
  full_join,
  by = c("computer_date", "time", "time_round")
  ) %>%
  mutate(
    .keep = "unused",
    trh_sines   = sin(NISTdegTOradian(true_heading)),
    trh_cosines = cos(NISTdegTOradian(true_heading)),
    cog_sines   = sin(NISTdegTOradian(cog)),
    cog_cosines = cos(NISTdegTOradian(cog)),
  ) %T>%
  print() %>% 
  summarise(
    .by = c(1, 3),
    across(is.numeric, ~ func(.x))
  ) %>%
  mutate(
    across(where(is.numeric), ~ if_else(is.nan(.x), NA, .x)),
    true_head_avg = NISTradianTOdeg(atan2(trh_sines, trh_cosines)),
    true_head_avg = true_head_avg %% 360,
    cog_avg       = NISTradianTOdeg(atan2(cog_sines, cog_cosines)),
    cog_avg       = cog_avg %% 360,
  ) %>%
  select(-contains(c("sines", "cosines"))) %>%
  rename("date" = any_of(contains("date"))) %T>% 
  print() 


posmv_avg %>%
  filter(
    date == as_date("2023-07-22") 
    & time_round >= as_hms("10:00:00")
  )
```


# Turner C3 Primary

```{r path-c3-primary}
c3p_path <- 
  dir_data_location %>%
  str_subset("Turner C3 Primary") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

```{r load-c3-primary}
c3p_load <- 
  c3p_path %>%
  read_delim(
    skip           = 1, 
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 600
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time"))) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %T>% 
  print()

c3p_avg <- 
  c3p_load %>%
  summarise(
    .by = c(1, 3),
    across(is.numeric, ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>% 
  print()
```



# Turner C3 Secondary

```{r path-c3-secondary}
c3s_path <- 
  dir_data_location %>%
  str_subset("Turner C3 Secondary") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

```{r load-c3-secondary}
c3s_load <- 
  c3s_path %>%
  read_delim(
    skip           = 1, 
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 600
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time")))%>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %T>% 
  print()

c3s_avg <- 
  c3s_load %>%
  summarise(
    .by = c(1, 3),
    across(is.numeric, ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>% 
  print()
```

# Fluorometer

```{r path-fluoro}
fluor_path <- 
  dir_data_location %>%
  str_subset("Fluorometer$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```


```{r load-fluoro}
fluor_load <-
  fluor_path %>%
  read_delim(
    skip           = 2, 
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 600
  ) %T>%
  print() %>%
  mutate(gain_chlfl = str_remove(gain, "X")) %>%
  rename(
    "chl_chlfl" = conc, "volt_chlfl" = raw_voltage,
    "flow_chlfl" = flow
    ) %>%
  hablar::retype(-contains("time")) %>%
  janitor::remove_empty("cols") %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %T>% 
  print()

fluor_avg <- 
  fluor_load %>%
  summarise(
    .by = c(1, 3),
    across(is.numeric, ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>% 
  print()
```


# DisOrgMat

```{r path-disorg}
dis_org_path <- 
  dir_data_location %>%
  str_subset("DisOrgMat$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

```{r load-disorg}
dis_org_load <-
  dis_org_path %>%
  read_delim(
    skip           = 2, 
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 600
  ) %T>%
  print() %>%
  mutate(gain_domfl = str_remove(gain, "X")) %>%
  rename(
    "dom_domfl" = conc, "volt_domfl" = raw_voltage,
    "flow_domfl" = flow
    )  %>%
  hablar::retype(-contains("time")) %>%
  janitor::remove_empty("cols") %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %T>% 
  print()

dis_org_avg <- 
  dis_org_load %>%
  summarise(
    .by = c(1, 3),
    across(is.numeric, ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>% 
  print()
```


# PortRMYoung

- Temperature
- Humidity
- Barometric
- Pressure	

```{r path-metero}
meteor_path <- 
  dir_data_location %>%
  str_subset("PortRMYoung$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

```{r load-metero}
meteor_dat <- 
  meteor_path %>%
  read_delim(
    skip           = 1,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 100
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename(
    "time"     = any_of(contains("time")),
    "air_temp" = temperature
    ) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  ) %T>%
  print()

meteor_avg <-
  meteor_dat %>%
  summarise(
    .by = c(1, 3),
    across(where(is.numeric), ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>%
  print()
```


# StarboardRMYoung

- date
- time
- rel speed
- rel direction
- true speed
- true direction
```{r path-wind}
wind_path <- 
  dir_data_location %>%
  str_subset("StarboardRMYoung$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

avg wind direction calc: <https://www.onsetcomp.com/resources/tech-notes/wind-data-averaging>

1. convert direction (degrees) to radians
2. create a sin and cos component
3. take average based on time
4. arctan2 for avg sin and cos
5. convert from radians to degrees
6. modulo to keep withing 0 - 360 degrees 

```{r load-wind}
wind_dat <-
  wind_path %>%
  read_delim(
    skip           = 1,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    na = c("-1.0")
    # n_max          = 600
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  {
    # rename columns by removing "seconds" and renaming columns
    x <- str_subset(colnames(.), "seconds", negate = TRUE)
    colnames(.) <- x
    .
  } %>%
  janitor::remove_empty("cols") %>%
  rename(
    "time" = any_of(contains("time")),
    "true_wind_speed" = true_speed,
    "rel_wind_speed" = relative_speed
    ) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = hms::round_hms(time, 60 * min_bin)
  ) %T>%
  print()

# avg wind speed needs extract calculations because averaging angles
wind_avg <- 
  wind_dat %>%
  mutate(
    .keep = "unused",
    rel_sines    = sin(NISTunits::NISTdegTOradian(relative_dir)),
    rel_cosines  = cos(NISTunits::NISTdegTOradian(relative_dir)),
    true_sines   = sin(NISTunits::NISTdegTOradian(true_dir)),
    true_cosines = cos(NISTunits::NISTdegTOradian(true_dir)),
  ) %T>%
  print() %>% 
  summarise(
    .by = c(1, 3),
    across(where(is.numeric), ~ func(.x))
  ) %>%
  mutate(
    across(where(is.numeric), ~ if_else(is.nan(.x), NA, .x)),
    rel_wind_dir  = NISTradianTOdeg(atan2(rel_sines, rel_cosines)),
    rel_wind_dir  = rel_wind_dir %% 360,
    true_wind_dir = NISTradianTOdeg(atan2(true_sines, true_cosines)),
    true_wind_dir = true_wind_dir %% 360,
  ) %>%
  select(-contains(c("sines", "cosines"))) %>%
  rename("date" = any_of(contains("date"))) %T>% 
  print()
```


# MicroTSG1

```{r path-microtsg}
microtsg_path <- 
  dir_data_location %>%
  str_subset("MicroTSG1$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

```{r load-microtsg}
microtsg_load <-
  microtsg_path %>%
  read_delim(
    skip           = 4,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 100
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time"))) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time)
  )  %>%
  select(
    date, time, time_round, "temp_tsg" = temperature, 
    "cond_tsg" = conductivity, "sal_tsg" = salinity
    ) %T>%
  print()

microtsg_avg <- 
  microtsg_load %>%
  summarise(
    .by = c(1, 3),
    across(where(is.numeric), ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>%
  print()
```

# SBTemp

```{r path-sbtemp}
sbtemp_path <- 
  dir_data_location %>%
  str_subset("SBTemp$") %>%
  dir_ls(regexp = "dat") %>%
  str_subset("String", negate = TRUE) %T>% 
  {
    sample(., 5) %>%
    print()
  }
```

```{r load-sbtemp}
sbtemp_load <-
  sbtemp_path %>%
  read_delim(
    skip           = 4,
    delim          = "\t",
    name_repair    = janitor::make_clean_names,
    show_col_types = FALSE,
    # n_max          = 100
  ) %T>%
  print() %>%
  hablar::retype(-contains("time")) %>%
  rename("time" = any_of(contains("computer_time"))) %>%
  mutate(
    .after = time,
    across(contains("date"), ~ mdy(.x)),
    time_round = time_fun(time),
    across(where(is.numeric), ~ na_if(.x, 0))
  ) %>%
  select(date:temperature)%>%
  rename("temp_sb" = temperature) %T>%
  print()

sbtemp_avg <- 
  sbtemp_load %>%
  summarise(
    .by = c(1, 3),
    across(where(is.numeric), ~ func(.x))
  ) %>%
  rename("date" = any_of(contains("date"))) %T>%
  print()
```


# Merge Data by Date and Time

```{r merge-data}
merge_dat <- 
  reduce(
  list(posmv_avg,  wind_avg, meteor_avg, microtsg_avg, sbtemp_avg,
       c3p_avg, c3s_avg, fluor_avg, dis_org_avg),
  full_join,
  by = c("date", "time_round")
  ) %>%
  mutate(
    .before = date,
    date_time = ymd_hms(paste(date, time_round))
  ) %>%
  arrange(date_time) %T>% 
  print() 

merge_dat %>%
  # slice_head(prop = 0.5) %>%
  slice_tail(prop = 0.5) %>%
  visdat::vis_miss()
```



path_rain  <- "RainGauge"

# Search All Folders

```{r}
dir_paths <-
  here("E:\\", "google_drive", ".shortcut-targets-by-id", "1E3fmKuWxmqhFspHhqvbFEI5qKGGKJgnk", "SFER Ship Exported Data") %>%
  dir_ls() %T>%
  {
    basename(.) %>%
    print()
  } %>%
  tibble(dir = .) %>%
  # slice(1:10) %>%
  
  mutate(
    cruise = basename(dir),
    number = str_extract(cruise, "\\d+"),
    subdir = map_chr(
      .x = dir,
      \(.x) {
        x <-
          dir_ls(
            .x, 
            regexp  = "(?i)VIDs",
            type    = "directory"
            ) 
        x <- ifelse(length(x) > 0, as.character(x), NA)
      }
    ), 
    subdir2 = map(
      .x = subdir,
      \(.x) {
        if (is.na(.x)) return(NA)
        dir_ls(.x, type = "directory")
      }
    )
  ) %>%
  arrange(number) %T>% 
  print() %>%
  unnest(subdir2) %>%
  mutate(
    sub = basename(subdir2),
    count_files = map_int(
      subdir2,
      \(.x) {
        if (is.na(.x)) return(NA)
        dir_ls(.x, type = "file") %>%
          str_subset("desktop", negate = TRUE) %>%
        length()

        }
    )
  ) %>%
  filter(count_files > 0) %T>% 
  # filter(replace_na(!str_detect(sub, "^Baro$|Barometer2|BowRMYoung"), TRUE)) %T>% 
  print()

dir_paths %>%
  count(sub)

dir_paths %>%
  filter(is.na(subdir2)) %>%
  count(cruise)
dir_paths %>%
  filter(!is.na(subdir2)) %>%
  count(cruise)

dir_paths %>%
  arrange(sub, cruise) %>%
  select(cruise, sub, count_files) %T>%
  print(.) %>%
  slice_tail(n = 58)
  
filt_names <- paste("DisOrgMat",
"Fluorometer",
"MicroTSG1",
"PortRMYoung",
"POSMV",
"RainGauge",
"SBTemp",
"StarboardRMYoung",
"Turner C3 Primary",
"Turner C3 Secondary", sep = "|")

dir_paths %>%
  filter(replace_na(!str_detect(sub, filt_names), TRUE))
```

